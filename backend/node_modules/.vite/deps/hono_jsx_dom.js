import {
  ErrorBoundary,
  Fragment,
  Suspense,
  createPortal,
  createRef,
  flushSync,
  forwardRef,
  jsxDEV,
  render,
  startTransition,
  startViewTransition,
  use,
  useActionState,
  useCallback,
  useDebugValue,
  useDeferredValue,
  useEffect,
  useFormStatus,
  useId,
  useImperativeHandle,
  useInsertionEffect,
  useLayoutEffect,
  useMemo,
  useOptimistic,
  useReducer,
  useRef,
  useState,
  useSyncExternalStore,
  useTransition,
  useViewTransition
} from "./chunk-6U3ZLTEF.js";
import {
  Children,
  DOM_MEMO,
  createContext,
  isValidElement,
  reactAPICompatVersion,
  shallowEqual,
  useContext
} from "./chunk-V66QVPUN.js";
import "./chunk-V4OQ3NZ2.js";

// node_modules/hono/dist/jsx/dom/index.js
var createElement = (tag, props, ...children) => {
  const jsxProps = props ? { ...props } : {};
  if (children.length) {
    jsxProps.children = children.length === 1 ? children[0] : children;
  }
  let key = void 0;
  if ("key" in jsxProps) {
    key = jsxProps.key;
    delete jsxProps.key;
  }
  return jsxDEV(tag, jsxProps, key);
};
var cloneElement = (element, props, ...children) => {
  return jsxDEV(
    element.tag,
    {
      ...element.props,
      ...props,
      children: children.length ? children : element.props.children
    },
    element.key
  );
};
var memo = (component, propsAreEqual = shallowEqual) => {
  const wrapper = (props) => component(props);
  wrapper[DOM_MEMO] = propsAreEqual;
  return wrapper;
};
var dom_default = {
  version: reactAPICompatVersion,
  useState,
  useEffect,
  useRef,
  useCallback,
  use,
  startTransition,
  useTransition,
  useDeferredValue,
  startViewTransition,
  useViewTransition,
  useMemo,
  useLayoutEffect,
  useInsertionEffect,
  useReducer,
  useId,
  useDebugValue,
  createRef,
  forwardRef,
  useImperativeHandle,
  useSyncExternalStore,
  useFormStatus,
  useActionState,
  useOptimistic,
  Suspense,
  ErrorBoundary,
  createContext,
  useContext,
  memo,
  isValidElement,
  createElement,
  cloneElement,
  Children,
  Fragment,
  StrictMode: Fragment,
  flushSync,
  createPortal
};
export {
  Children,
  ErrorBoundary,
  Fragment,
  Fragment as StrictMode,
  Suspense,
  cloneElement,
  createContext,
  createElement,
  createPortal,
  createRef,
  dom_default as default,
  flushSync,
  forwardRef,
  isValidElement,
  createElement as jsx,
  memo,
  render,
  startTransition,
  startViewTransition,
  use,
  useActionState,
  useCallback,
  useContext,
  useDebugValue,
  useDeferredValue,
  useEffect,
  useFormStatus,
  useId,
  useImperativeHandle,
  useInsertionEffect,
  useLayoutEffect,
  useMemo,
  useOptimistic,
  useReducer,
  useRef,
  useState,
  useSyncExternalStore,
  useTransition,
  useViewTransition,
  reactAPICompatVersion as version
};
//# sourceMappingURL=hono_jsx_dom.js.map
